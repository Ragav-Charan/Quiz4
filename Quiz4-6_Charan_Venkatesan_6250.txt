
Name: Charan Venkatesan
Last 4 digits ID: 6250
Computer IP address:  192.168.56.1
CSE 6331, Cloud Computing					


Quiz Q4, 6.00, Summer 2019   (c) DL, UTA, 2019


  C&P means cut and paste only those relevant lines from your program(s) into this quiz.


 1.  I understand that I am on my honor during this quiz, I will not collaborate, use 
     non-allowed sources, and I will not discuss or share this quiz with anyone for the next 
     12 hours.
     You MAY: use Google to search, use previous source code, 
     YOU MAY NOT use:
     Email, Facebook, Hangouts, IM, chats, Skype or ANY other human connection.

     This is a timed test. Late tests will have points deducted for being late.
     Very late tests will not be graded.

     When you are complete, with any part, please raise your hand, so we may visually inspect that part.

     The second part of the test, you should electronically submit, you will need to copy and paste 
     only those lines of code to implement that part of the test, usually a few (two to eight) lines of code. 
     Place it immediately after the question.

     Submit this Quiz (renamed) with code cut and pasted, ONLY text. DO NOT submit zips, binaries, libraries,
     or anything other than text.

     When any parts(questions) are complete complete, submit this test, you may make multiple submissions.

     If you have computer, or other, problems, please raise your hand immediately.

     If you understand and agree, please initial here:
     ___________CV______

 2. Get files from this same folder.
   
 3. Name your program/submission with your name and last digits of your ID.

 4. Using the cloud services provider, all functionality possible should be implemented on that provider.
    (Of course, displaying web pages through a browser and the user interface is "local")
    The cloud service provider is MS Azure.

 4+ In order to give as many people the opportunity to demo in the last few minutes, you may only demo ONE Question in the
    last 5 minutes of the quiz time or for the few minutes afterward. 
  
Show and submit code, when each part is complete, raise your hand and then show us:

 5. Upload the .csv data file to cloud service. Once it is in the cloud service you will import it into
    SQL tables, created and indexed as necessary (for the following parts).
    The voting (.csv) are the states (in alphabetical order, from Alabama to Wyoming, 
    including Washington DC), total state population, voting population, number registered voters, 
    the number who actually did vote, all in thousands (the values have 000 appended at the end).
    Please create SQL tables with the information in the dataset.
    Show a web page and interface (which resides on the cloud provider) with your student ID followed by your
    last name then comma then first name (as it appears on your student ID), in large font at the top of every web page displayed 
    (for this quiz)
    On the same web page show the names of all states with a total population between 2 to 8 million and 
    then between 8 million and 40 million.

DB Connection:
cnxn = pyodbc.connect('DRIVER='+driver+';SERVER='+server+';PORT=1433;DATABASE='+database+';UID='+username+';PWD='+ password)

@app.route('/')
def home():
    cur = cnxn.cursor()
    cur.execute("select StateName from voting WHERE TotalPop between 2000 and 8000")
    get1 = cur.fetchall()
    l1=[]
    l2=[]
    for row1 in get1:
        l1.append(row1[0])
    cur.execute("select StateName from voting WHERE TotalPop between 8000 and 40000")
    get2 = cur.fetchall()
    for  row2 in get2:
        l2.append(row2[0])
    return render_template("home.html", q1 = l1,q2 = l2)

<!doctype html>
<html>
	<body>
		<center>
		<header> <h1> Home </h1> </header>
            <header> <h1> 1001626250</h1> </header>
		<header> <h1> Venkatesan, Charan </h1> </header>

            <header> <h1> Quiz 4</h1> </header>
		<br> <br>
		<h1> This Webpage consist of Voting records</h1>
		<br>
        <p> Population between 2000000 and 8000000</p>
            <table border = 1>
         {% for row in q1 %}
         <tr>
		<td>{{row}}</td>
         </tr>
         {% endfor %}
      </table>
        <p> Population between 8000000 and 40000000</p>
            <table border = 1>
         {% for row in q2 %}
         <tr>
		<td>{{row}}</td>
         </tr>
         {% endfor %}
      </table>
        </center>
	</body>
</html>

 6. Show a "scatter" diagram (point chart) where the x axis is Total Population and the y axis is the number registered, in millions.
    (That is, for this part, divide all populations by 1000 to get millions. We will give you a range of Total populations 
    (for example from 3 to 10, which means only display those states which have a total population between 3 million and 10 million.)
    The x axis should be horizontal, and the y vertical. 
    The axis (or all points) should be labeled with values. The user will give the population range values.
    The axis should be labeled, and the plot should occupy between 75% and 85% of the width of your display.

DB Connection:
cnxn = pyodbc.connect('DRIVER='+driver+';SERVER='+server+';PORT=1433;DATABASE='+database+';UID='+username+';PWD='+ password)

app.py:
@app.route('/records')
def records():
    return render_template('records.html')

@app.route('/options', methods=['POST', 'GET'])
def options():
    p1 = int(request.form['p1']) * 1000
    p2 = int(request.form['p2']) * 1000
    rows = []
    get = []
    c = []
    points = []
    style = {'role':'style'}
    annotation = {'role':'annotation'}
    points.append(['TotalPop','Registered'])
    cur = cnxn.cursor()
    cur.execute("select TotalPop,Registered from voting WHERE TotalPop between ? and ?",(p1,p2))
    get = cur.fetchall();
    rows.append(get)
    for row in get:
        points.append([row[0],row[1]])
    return render_template("list.html", p=points)

list.html:
<html>
  <head>
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">
      google.charts.load('current', {'packages':['corechart']});
      google.charts.setOnLoadCallback(drawScatterChart);
      function drawScatterChart() {
          var dataset = {{ p|tojson }}
          var data = google.visualization.arrayToDataTable(dataset);
          var options = {
          title: 'Total Population vs. Registered Comparision',
          hAxis: {title: 'Total Population', minValue: 0},
          vAxis: {title: 'Registered', minValue: 0},
          legend: 'none'
        };
          var chart = new google.visualization.ScatterChart(document.getElementById('chart_div'));

        chart.draw(data, options);
      }
    </script>
  </head>
  <body>
  <center>
    <h1>1001626250</h1>
    <h1>Venkatesan, Charan</h1>
    <h1>Assignment 4</h1>
    <p>Points : {{ p }}</p>
    <p>Scatter Chart</p>
    <div id="chart_div" style="width: 900px; height: 500px;"></div>
  </center>
  </body>
</html>

 7. Show a pie chart for total population, that is, total population (in millions) in groups (ranges), that we will give you.
    (For example, if we give you 5 (million), show how many states are in the group 0 to 5 million, 5 to 10 million, 
    10 to 15 million, etc.) where each pie section will show how many states are in that group. 
    Please show the pie sections in different colors and put the label (that is the group, for example,
    "0-5", "5-10") inside the pie section and the pie part size (that is the number of states, or the percent of states,
    outside that pie section.) The pie chart should be between 70% and 95% of the width of your display.

DB Connection:
cnxn = pyodbc.connect('DRIVER='+driver+';SERVER='+server+';PORT=1433;DATABASE='+database+';UID='+username+';PWD='+ password)

@app.route('/records1')
def records1():
    return render_template('records1.html')

@app.route('/options1', methods=['POST', 'GET'])
def options1():
    p = int(request.form['p']) * 1000
    rows = []
    get = []
    c = []
    points = []
    points.append(['Total Population','State Count'])
    cur = cnxn.cursor()
    cur.execute("select max(TotalPop) from voting")
    maxPop = cur.fetchone();
    print (maxPop)
    i = 0
    while(i < maxPop[0] ):
        cur.execute("select count(StateName) from voting WHERE TotalPop between ? and ?",(i,i+(p)))
        get = cur.fetchone();
        key = str(i)+"-"+str(i+(p))
        points.append([key, get[0]])
        i = i+(p)
        print(points)
    return render_template("list1.html", p=points)

<!doctype html>
<html>
	<body>

		<center>

		<header> <h1> Records </h1> </header>
		<header> <h1> 1001626250</h1> </header>
            <header> <h1> Venkatesan, Charan </h1> </header>
            <header> <h1> Quiz 4</h1> </header>
		<br> <br>
		<h1> </h1>
		<br>
        <form action = "{{ url_for('options1') }}" method = "POST">
		  <label>Enter total population 1:</label>
          <input type = "text"
				 name = "p"
                  />
		  <br>
		  <br>

		  <input type = "submit" value = "submit" /><br>
		  </form>
    </body>
</html>




 8. Using the formula x = (y*y*y) modulo 10, (That is, create a sequence of values where you extract, just the last decimal digit)
    where the user specifies the range of y, (for example, if the user gives the value 3, you will generate: 1, 8, 7
    (which is 1*1*1 mod 10 = 1, 2*2*2 mod 10= 8, 3*3*3 mod 10 = 7))
    Then show, in a horizontal bar graph show number on each digit generated (number of 1s, number of 2s, etc.) IF there are 
    some values (in the previous example, there are no 0, 2, 3, 4... etc generated) do not show a bar.
    The bars should be labeled, and the chart should occupy between 70% and 95% of the width of your display,
    show legend (amounts) inside each bar.

@app.route('/options2', methods=['POST', 'GET'])
def options2():
    rows = []
    get = []
    c = {}
    points = []
    p = int(request.form['p'])
    for i in range(p):
        lastnum = (i*i*i) % 10
        if c.has_key(i):
            c[i] = [i,i+1]
        else:
            c.append(i,lastnum)
    return render_template("list2.html", p=c)

<!doctype html>
<html>
	<body>

		<center>

		<header> <h1> Records </h1> </header>
		<header> <h1> 1001626250</h1> </header>
            <header> <h1> Venkatesan, Charan </h1> </header>
            <header> <h1> Quiz 4</h1> </header>
		<br> <br>
		<h1> </h1>
		<br>
        <form action = "{{ url_for('options2') }}" method = "POST">
		  <label>Enter Number:</label>
          <input type = "text"
				 name = "p"
                  />
		  <br>
		  <br>

		  <input type = "submit" value = "submit" /><br>
		  </form>
    </body>
</html>


<html>
  <head>
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">
      google.charts.load("current", {'packages':['corechart','bar']});
      google.charts.setOnLoadCallback(drawBarChart);
       function drawBarChart() {
        var dataset = {{ p|tojson }}
        var data = google.visualization.arrayToDataTable(dataset);
        var options = {
        title: 'Number vs. Last Digit Count',
        hAxis: {
          title: 'Number',
        },
        vAxis: {
          title: 'Last Digit Count'
        },
      };
        var chart = new google.visualization.Bar(document.getElementById('col_chart'));

        chart.draw(data,options);
      }
    </script>
  </head>
  <body>
  <center>
    <h1>1001626250</h1>
    <h1>Venkatesan, Charan</h1>
    <h1>Assignment 4</h1>
    <p>Points : {{ p }}</p>
      <p>Bar Chart</p>
      <div id="col_chart" style="width: 900px; height: 500px;"></div>
  </center>
  </body>
</html>


 
 9. Show GTA parts 5, 6, 7, 8

 10. When complete, return (send) this quiz
     If you finish early, send this immediately, otherwise send between
     the end of class and no more than 1 minute after that.
